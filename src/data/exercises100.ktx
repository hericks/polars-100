--- Basics
< q1
Import the polars package under the name `pl`. (★☆☆)

**Note.** The import is required for all subsequent questions.

< h1
hint: import … as

< a1
import polars as pl


< q2
Print the polars version and configuration. (★☆☆)

< h2
hint: pl.show_versions, pl.Config().state

< a2
pl.show_versions()
pl.Config().state()


< q3
Create a series named "nums" with intergers ranging from 0 to 9. (★☆☆)

< h3
hint: pl.Series

< a3
nums = pl.Series("nums", range(10))
nums


< q4
Create a dataframe with columns "nums" and "bools" of integers and boolean values. (★☆☆)

< h4
hint: pl.DataFrame

< a4
df = pl.DataFrame({
    "nums": range(3),
    "bools": [True, True, False],
})
df


< q5
Find the (estimated) memory size of a series or dataframe. (★☆☆)

< h5
hint: pl.Series.estimated_size, pl.DataFrame.estimated_size

< a5
nums = pl.Series(range(10))
nums.estimated_size()


< q6
Add a new column "value" with value 1.0 to the dataframe `df`. (★☆☆)

< d6
df = pl.DataFrame({
    "name": ["Tim", "Struppi", "Haddock"],
})

< h6
hint: pl.DataFrame.with_columns, pl.lit

< a6
df.with_columns(
    pl.lit(1.0).alias("value")
)


< q7
Add series `age` as new column to the dataframe `df`. (★☆☆)

< d7
df = pl.DataFrame({
    "name": ["Tim", "Struppi", "Haddock"],
})

age = pl.Series("age", [23, 4, 45])

< h7
hint: pl.DataFrame.with_columns, pl.lit

< a7
df.with_columns(age)


< q8
Peek at the first 10 rows of the dataframe `df`. (★☆☆)

< d8
import random

df = pl.DataFrame({
    "value": [random.normalvariate() for _ in range(250)]
})

< h8
hint: pl.DataFrame.head

< a8
df.head(10)


< q9
Print the number of rows in the dataframe `df`. (★☆☆) 

< d9
import random

df = pl.DataFrame({
    "value": [random.normalvariate() for _ in range(42)]
})

< h9
hint: pl.DataFrame.height

< a9
df.height


< q10
Reorder the columns of the dataframe `df`. (★☆☆) 

< d10
df = pl.DataFrame({
    "is_dog": [False, True, False],
    "age": [23, 4, 45],
    "name": ["Tim", "Struppi", "Haddock"],
})

< h10
hint: pl.DataFrame.select

< a10
df.select("name", "age", "is_dog")


< q11
Filter the dataframe `df` for humans of age 23. (★☆☆)

< d11
df = pl.DataFrame({
    "is_dog": [False, True, False],
    "age": [23, 4, 45],
    "name": ["Tim", "Struppi", "Haddock"],
})

< h11
hint: pl.DataFrame.filter, expressions can be negated with ~

< a11
df.filter(~pl.col("is_dog), pl.col("age") == 23)


< q12
Compare the dataframes `df1` and `df2` for equality. (★☆☆)

**Note.** The result should return `True` as a single python `bool`.

< d12
df1 = df2 = pl.DataFrame({
    "test": ["One-sample t", "Chi-squared", "Paired t", "Kolmogorov-Smirnov", "Mann-Whitney U"],
    "p-value": [0.14, None, 0.02, 0.67, 0.42],
})

< h12
hint: pl.DataFrame.equals

< a12
df1.equals(df2)