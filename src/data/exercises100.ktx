--- Basics
< q1
Import the polars package under the name `pl`. (★☆☆)

**Note.** The import is required for all subsequent questions.

< h1
hint: import … as

< a1
import polars as pl


< q2
Print the polars version and configuration. (★☆☆)

< h2
hint: pl.show_versions, pl.Config().state

< a2
pl.show_versions()
pl.Config().state()


< q3
Create a series named "nums" with intergers ranging from 0 to 9. (★☆☆)

< h3
hint: pl.Series

< a3
nums = pl.Series("nums", range(10))
nums


< q4
Create a dataframe with columns "nums" and "bools" of integers and boolean values. (★☆☆)

< h4
hint: pl.DataFrame

< a4
df = pl.DataFrame({
    "nums": range(3),
    "bools": [True, True, False],
})
df


< q5
Find the (estimated) memory size of a series or dataframe. (★☆☆)

< h5
hint: pl.Series.estimated_size, pl.DataFrame.estimated_size

< a5
nums = pl.Series(range(10))
nums.estimated_size()


< q6
Add a new column "value" with value 1.0 to the dataframe `df`. (★☆☆)

< d6
df = pl.DataFrame({
    "name": ["Tim", "Struppi", "Haddock"],
})

< h6
hint: pl.DataFrame.with_columns, pl.lit

< a6
df.with_columns(
    pl.lit(1.0).alias("value")
)


< q7
Add series `age` as new column to the dataframe `df`. (★☆☆)

< d7
df = pl.DataFrame({
    "name": ["Tim", "Struppi", "Haddock"],
})

age = pl.Series("age", [23, 4, 45])

< h7
hint: pl.DataFrame.with_columns, pl.lit

< a7
df.with_columns(age)


< q8
Peek at the first 10 rows of the dataframe `df`. (★☆☆)

< d8
df = pl.DataFrame({
    "index": range(250)
})

< h8
hint: pl.DataFrame.head

< a8
df.head(10)


< q9
Print the number of rows in the dataframe `df`. (★☆☆) 

< d9
df = pl.DataFrame({
    "index": range(42)
})

< h9
hint: pl.DataFrame.height

< a9
df.height


< q10
Reorder the columns of the dataframe `df` to `"name"`, `"age"`, and `"is_dog"`. (★☆☆) 

< d10
df = pl.DataFrame({
    "is_dog": [False, True, False],
    "age": [23, 4, 45],
    "name": ["Tim", "Struppi", "Haddock"],
})

< h10
hint: pl.DataFrame.select

< a10
df.select("name", "age", "is_dog")


< q11
Filter the dataframe `df` for humans of age 23. (★☆☆)

< d11
df = pl.DataFrame({
    "is_dog": [False, True, False],
    "age": [23, 4, 45],
    "name": ["Tim", "Struppi", "Haddock"],
})

< h11
hint: pl.DataFrame.filter, expressions can be negated with ~

< a11
df.filter(~pl.col("is_dog), pl.col("age") == 23)


< q12
Compare the dataframes `df1` and `df2` for equality. (★☆☆)

**Note.** The result should return `True` as a single python `bool`.

< d12
df1 = df2 = pl.DataFrame({
    "test": ["One-sample t", "Chi-squared", "Paired t", "Kolmogorov-Smirnov", "Mann-Whitney U"],
    "p_value": [0.14, None, 0.02, 0.67, 0.42],
})

< h12
hint: pl.DataFrame.equals

< a12
df1.equals(df2)


< q13
For each unique value of `count`, select the first row in `df`. (★☆☆)

< d13
df = pl.DataFrame({
    "count": [2, 2, 3, 5, 5, 5],
    "name": ["Alice", "Bob", "Carol", "Carlos", "Charlie", "Eve"],
})

< h13
hint: pl.DataFrame.unique

< a13
df.unique(subset="count", keep="first")


< q14
Create a dataframe with columns `name` and `age`. Each column should contain three unique values. The dataframe should have a row for each combination. (★☆☆)

< h14
hint: pl.DataFrame.join

< a14
names = pl.DataFrame(["Huey", "Dewey", "Louie"], schema=["name"])
ages = pl.DataFrame([10, 11, 12], schema=["age"])

names.join(ages, how="cross")


--- Config settings
< q15
Print the dataframe `df`, such that all rows are visible. (★☆☆)

< d15
df = pl.DataFrame({
    "index": range(20)
})

< h15
hint: pl.Config().set_tbl_rows()

< a15
with pl.Config() as cfg:
    cfg.set_tbl_rows(-1)
    print(df)


< q16
Print the dataframe `df`, such that all list element are visible. (★☆☆)

< d16
df = pl.DataFrame({
    "name_lists": [list("Alice"), list("Bob"), list("Charlie")]
})

< h16
hint: pl.Config().set_fmt_table_cell_list_len

< a16
with pl.Config() as cfg:
    cfg.set_fmt_table_cell_list_len(-1)
    print(df)

< q17
Create a series with all dates corresponding to the month of July 2016. (★★☆)

< h17
hint: pl.date_range

< a17
from datetime import date

start, end = date(2016, 7, 1), date(2016, 8, 1)
dates = pl.date_range(start, end, interval="1d", eager=True, closed="left")


< q18
Perform an element-wise multiplication of the float column `"scalar"` and the list column `"vector"`. (★★★)

< d18
df = pl.DataFrame({
    "scalar": [1., 2., 3.],
    "vector": [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
})

< h18
hint: pl.Expr.explode, pl.Expr.implode, pl.Expr.over

< a18
(
    df_test
    .with_columns(
        (
            pl.col("vector").explode() * pl.col("scalar")
        )
        .implode().over(pl.int_range(pl.len()))
    )
)


< q19
Compute bootstrapped 95% confidence intervals for the mean of the `"value"` column (i.e., resample the elements of the column with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★)

< d19
import random

df = pl.DataFrame({
    "value": [random.normalvariate(mu=2, sigma=0.5)**2 for _ in range(100)]
})

< h19
hint: pl.Expr.sample, pl.Expr.quantile

< a19
N = 100_000
(
    df
    .select(
        pl.col("value").sample(N * pl.len(), with_replacement=True),
    )
    .with_row_index()
    .group_by(pl.col("index").mod(N))
    .mean()
    .select(
        pl.col("value").quantile(0.025).alias("lower"),
        pl.col("value").quantile(0.975).alias("upper"),
    )
)